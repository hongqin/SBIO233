lambda = 1; 
#n = c(1, 2,3,4,10); #number of parrallel nodes
n = 4;
simtime = 10;  #simulation time
simstep = 0.1 
popsize = 10^5; #population size
age = rep(NA, popsize);
for(  p in 1: popsize ) {
 max_age = NA;
 for( i in 1:n ) {  
   x = rexp( 1, lambda);
   max_age = c( max_age, x );
 }
 age[p] = max( max_age, na.rm=T); 
}
median.age = median( age );
mean.age = mean( age );
h = hist(age, br=100, main=paste("n=",n) );
tb = data.frame( cbind( h$mids, h$density, h$counts ) );
names(tb) = c("mids","density","counts");
tb$cumulative.counts = 0; #initialization
for( i in 2:length(tb[,1]) ) {
  tb$cumulative.counts[i] = tb$cumulative.counts[i-1] + tb$counts[i];
}
tb$s = 1 - tb$cumulative.counts / popsize;
tb$m = tb$density / tb$s ;
plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( c("popsize:",popsize,"bins=",length(tb$mids)),sep=" " ) );
plot( tb$m ~ tb$mids, xlim = c(0, mean.age*10), main=paste( c("popsize:",popsize,"bins=",length(tb$mids)),sep=" " ) );
plot( tb$m ~ tb$mids, main=paste( c("popsize:",popsize,"bins=",length(tb$mids)),sep=" " ) );
tail(tb)
plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( c("popsize:",popsize,"n:",n,"bins=",length(tb$mids)),sep=" " ) );
plot( tb$m ~ tb$mids, main=paste( c("popsize:",popsize,"n:",n,"bins=",length(tb$mids)),sep=" " ) );
plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( c("popsize:",popsize,"n:",n,"bins=",length(tb$mids)),sep='' ) );
plot( tb$m ~ tb$mids, main=paste( c("popsize:",popsize,"n:",n,"bins=",length(tb$mids)),sep='' ) );
?paste
# simulation of mortality curves based on exonential dying compoennts
# exponential distribution f(x) = lambda e^(- lambda x)
rm(list=ls());
component.mortality.rate = function(lambda) { lambda; };
single.component.survivalbility = function(lambda, x) { exp( - lambda * x) }
single.component.mortality = function(lambda, x) {1 - lambda * exp(-lambda*x); }
lambda = 1; 
#n = c(1, 2,3,4,10); #number of parrallel nodes
n = 4;
simtime = 10;  #simulation time
simstep = 0.1 
popsize = 10^5; #population size
age = rep(NA, popsize);
for(  p in 1: popsize ) {
 max_age = NA;
 for( i in 1:n ) {  
   x = rexp( 1, lambda);
   max_age = c( max_age, x );
 }
 age[p] = max( max_age, na.rm=T); 
}
median.age = median( age );
mean.age = mean( age );
h = hist(age, br=100, main=paste("n=",n) );
tb = data.frame( cbind( h$mids, h$density, h$counts ) );
names(tb) = c("mids","density","counts");
tb$cumulative.counts = 0; #initialization
for( i in 2:length(tb[,1]) ) {
  tb$cumulative.counts[i] = tb$cumulative.counts[i-1] + tb$counts[i];
}
tb$s = 1 - tb$cumulative.counts / popsize;
tb$m = tb$density / tb$s ;
plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( c("popsize:",popsize,"n:",n,"bins=",length(tb$mids)),sep=',' ) );
plot( tb$m ~ tb$mids, main=paste( c("popsize:",popsize,"n:",n,"bins=",length(tb$mids)),sep=',' ) );
summary(tb)
n = 2;
simtime = 10;  #simulation time
simstep = 0.1 
popsize = 10^5; #population size
age = rep(NA, popsize);
for(  p in 1: popsize ) {
 max_age = NA;
 for( i in 1:n ) {  
   x = rexp( 1, lambda);
   max_age = c( max_age, x );
 }
 age[p] = max( max_age, na.rm=T); 
}
median.age = median( age );
mean.age = mean( age );
h = hist(age, br=100, main=paste("n=",n) );
tb = data.frame( cbind( h$mids, h$density, h$counts ) );
names(tb) = c("mids","density","counts");
tb$cumulative.counts = 0; #initialization
for( i in 2:length(tb[,1]) ) {
  tb$cumulative.counts[i] = tb$cumulative.counts[i-1] + tb$counts[i];
}
tb$s = 1 - tb$cumulative.counts / popsize;
tb$m = tb$density / tb$s ;
plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( c("popsize:",popsize,"n:",n,"bins=",length(tb$mids)),sep=',' ) );
plot( tb$m ~ tb$mids, main=paste( c("popsize:",popsize,"n:",n,"bins=",length(tb$mids)),sep=',' ) );
# simulation of mortality curves based on exonential dying compoennts
# exponential distribution f(x) = lambda e^(- lambda x)
rm(list=ls());
component.mortality.rate = function(lambda) { lambda; };
single.component.survivalbility = function(lambda, x) { exp( - lambda * x) }
single.component.mortality = function(lambda, x) {1 - lambda * exp(-lambda*x); }
lambda = 1; 
#n = c(1, 2,3,4,10); #number of parrallel nodes
n = 2;
simtime = 10;  #simulation time
simstep = 0.1 
popsize = 10^5; #population size
age = rep(NA, popsize);
for(  p in 1: popsize ) {
 max_age = NA;
 for( i in 1:n ) {  
   x = rexp( 1, lambda);
   max_age = c( max_age, x );
 }
 age[p] = max( max_age, na.rm=T); 
}
median.age = median( age );
mean.age = mean( age );
h = hist(age, br=100, main=paste("n=",n) );
tb = data.frame( cbind( h$mids, h$density, h$counts ) );
names(tb) = c("mids","density","counts");
tb$cumulative.counts = 0; #initialization
for( i in 2:length(tb[,1]) ) {
  tb$cumulative.counts[i] = tb$cumulative.counts[i-1] + tb$counts[i];
}
tb$s = 1 - tb$cumulative.counts / popsize;
tb$m = tb$density / tb$s ;
plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( c("popsize:",popsize,"n:",n,"bins=",length(tb$mids)),sep=',' ) );
plot( tb$m ~ tb$mids, main=paste( c("popsize:",popsize,"n:",n,"bins=",length(tb$mids)),sep=',' ) );
summary(tb)
head(tb)
tb[5:15,]
tb[20:40,]
# simulation of mortality curves based on exonential dying compoennts
# exponential distribution f(x) = lambda e^(- lambda x)
rm(list=ls());
component.mortality.rate = function(lambda) { lambda; };
single.component.survivalbility = function(lambda, x) { exp( - lambda * x) }
single.component.mortality = function(lambda, x) {1 - lambda * exp(-lambda*x); }
lambda = 1; 
#n = c(1, 2,3,4,10); #number of parrallel nodes
n = 10;
simtime = 10;  #simulation time
simstep = 0.1 
popsize = 10^5; #population size
age = rep(NA, popsize);
for(  p in 1: popsize ) {
 max_age = NA;
 for( i in 1:n ) {  
   x = rexp( 1, lambda);
   max_age = c( max_age, x );
 }
 age[p] = max( max_age, na.rm=T); 
}
median.age = median( age );
mean.age = mean( age );
h = hist(age, br=100, main=paste("n=",n) );
tb = data.frame( cbind( h$mids, h$density, h$counts ) );
names(tb) = c("mids","density","counts");
tb$cumulative.counts = 0; #initialization
for( i in 2:length(tb[,1]) ) {
  tb$cumulative.counts[i] = tb$cumulative.counts[i-1] + tb$counts[i];
}
tb$s = 1 - tb$cumulative.counts / popsize;
tb$m = tb$density / tb$s ;
plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( c("popsize:",popsize,"n:",n,"bins=",length(tb$mids)),sep=',' ) );
plot( tb$m ~ tb$mids, main=paste( c("popsize:",popsize,"n:",n,"bins=",length(tb$mids)),sep=',' ) );
tail(tb)
tb[30:40,]
tb[60:80,]
tb[40:70,]
# simulation of mortality curves based on exonential dying compoennts
# exponential distribution f(x) = lambda e^(- lambda x)
rm(list=ls());
component.mortality.rate = function(lambda) { lambda; };
single.component.survivalbility = function(lambda, x) { exp( - lambda * x) }
single.component.mortality = function(lambda, x) {1 - lambda * exp(-lambda*x); }
lambda = 1; 
#n = c(1, 2,3,4,10); #number of parrallel nodes
n = 10;
simtime = 10;  #simulation time
simstep = 0.1 
popsize = 10^5; #population size
age = rep(NA, popsize);
for(  p in 1: popsize ) {
 max_age = NA;
 for( i in 1:n ) {  
   x = rexp( 1, lambda);
   max_age = c( max_age, x );
 }
 age[p] = max( max_age, na.rm=T); 
}
median.age = median( age );
mean.age = mean( age );
h = hist(age, br=50, main=paste("n=",n) );
tb = data.frame( cbind( h$mids, h$density, h$counts ) );
names(tb) = c("mids","density","counts");
tb$cumulative.counts = 0; #initialization
for( i in 2:length(tb[,1]) ) {
  tb$cumulative.counts[i] = tb$cumulative.counts[i-1] + tb$counts[i];
}
tb$s = 1 - tb$cumulative.counts / popsize;
tb$m = tb$density / tb$s ;
plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( c("popsize:",popsize,"n:",n,"bins=",length(tb$mids)),sep=',' ) );
plot( tb$m ~ tb$mids, main=paste( c("popsize:",popsize,"n:",n,"bins=",length(tb$mids)),sep=',' ) );
tb
# simulation of mortality curves based on exonential dying compoennts
# exponential distribution f(x) = lambda e^(- lambda x)
rm(list=ls());
component.mortality.rate = function(lambda) { lambda; };
single.component.survivalbility = function(lambda, x) { exp( - lambda * x) }
single.component.mortality = function(lambda, x) {1 - lambda * exp(-lambda*x); }
lambda = 1; 
#n = c(1, 2,3,4,10); #number of parrallel nodes
n = 10;
simtime = 10;  #simulation time
simstep = 0.1 
popsize = 10^4; #population size
age = rep(NA, popsize);
for(  p in 1: popsize ) {
 max_age = NA;
 for( i in 1:n ) {  
   x = rexp( 1, lambda);
   max_age = c( max_age, x );
 }
 age[p] = max( max_age, na.rm=T); 
}
median.age = median( age );
mean.age = mean( age );
h = hist(age, br=50, main=paste("n=",n) );
tb = data.frame( cbind( h$mids, h$density, h$counts ) );
names(tb) = c("mids","density","counts");
tb$cumulative.counts = 0; #initialization
for( i in 2:length(tb[,1]) ) {
  tb$cumulative.counts[i] = tb$cumulative.counts[i-1] + tb$counts[i];
}
tb$s = 1 - tb$cumulative.counts / max(tb$cumulative.counts);
tb$m = tb$density / tb$s ;
plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( c("popsize:",popsize,"n:",n,"bins=",length(tb$mids)),sep=',' ) );
plot( tb$m ~ tb$mids, main=paste( c("popsize:",popsize,"n:",n,"bins=",length(tb$mids)),sep=',' ) );
# simulation of mortality curves based on exonential dying compoennts
# exponential distribution f(x) = lambda e^(- lambda x)
rm(list=ls());
component.mortality.rate = function(lambda) { lambda; };
single.component.survivalbility = function(lambda, x) { exp( - lambda * x) }
single.component.mortality = function(lambda, x) {1 - lambda * exp(-lambda*x); }
lambda = 1; 
#n = c(1, 2,3,4,10); #number of parrallel nodes
n = 10;
simtime = 10;  #simulation time
simstep = 0.1 
popsize = 10^4; #population size
age = rep(NA, popsize);
for(  p in 1: popsize ) {
 max_age = NA;
 for( i in 1:n ) {  
   x = rexp( 1, lambda);
   max_age = c( max_age, x );
 }
 age[p] = max( max_age, na.rm=T); 
}
median.age = median( age );
mean.age = mean( age );
h = hist(age, br=50, main=paste("n=",n) );
tb = data.frame( cbind( h$mids, h$density, h$counts ) );
names(tb) = c("mids","density","counts");
tb$cumulative.counts = 0; #initialization
for( i in 2:length(tb[,1]) ) {
  tb$cumulative.counts[i] = tb$cumulative.counts[i-1] + tb$counts[i];
}
tb$s = 1 - tb$cumulative.counts / max(tb$cumulative.counts);
tb$m = tb$density / tb$s ;
plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( c("n:",n,"bins=",length(tb$mids)),sep=',' ) );
plot( tb$m ~ tb$mids, main=paste( c("n:",n,"bins=",length(tb$mids)),sep=',' ) );
?paste
# simulation of mortality curves based on exonential dying compoennts
# exponential distribution f(x) = lambda e^(- lambda x)
rm(list=ls());
component.mortality.rate = function(lambda) { lambda; };
single.component.survivalbility = function(lambda, x) { exp( - lambda * x) }
single.component.mortality = function(lambda, x) {1 - lambda * exp(-lambda*x); }
lambda = 1; 
#n = c(1, 2,3,4,10); #number of parrallel nodes
n = 10;
simtime = 10;  #simulation time
simstep = 0.1 
popsize = 10^4; #population size
age = rep(NA, popsize);
for(  p in 1: popsize ) {
 max_age = NA;
 for( i in 1:n ) {  
   x = rexp( 1, lambda);
   max_age = c( max_age, x );
 }
 age[p] = max( max_age, na.rm=T); 
}
median.age = median( age );
mean.age = mean( age );
h = hist(age, br=50, main=paste("n=",n) );
tb = data.frame( cbind( h$mids, h$density, h$counts ) );
names(tb) = c("mids","density","counts");
tb$cumulative.counts = 0; #initialization
for( i in 2:length(tb[,1]) ) {
  tb$cumulative.counts[i] = tb$cumulative.counts[i-1] + tb$counts[i];
}
tb$s = 1 - tb$cumulative.counts / max(tb$cumulative.counts);
tb$m = tb$density / tb$s ;
plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( c("n:",n,"bins=",length(tb$mids)),collapse = ',' ) );
plot( tb$m ~ tb$mids, main=paste( c("n:",n,"bins=",length(tb$mids)),collapase=',' ) );
# simulation of mortality curves based on exonential dying compoennts
# exponential distribution f(x) = lambda e^(- lambda x)
rm(list=ls());
component.mortality.rate = function(lambda) { lambda; };
single.component.survivalbility = function(lambda, x) { exp( - lambda * x) }
single.component.mortality = function(lambda, x) {1 - lambda * exp(-lambda*x); }
lambda = 1; 
#n = c(1, 2,3,4,10); #number of parrallel nodes
n = 10;
simtime = 10;  #simulation time
simstep = 0.1 
popsize = 10^4; #population size
age = rep(NA, popsize);
for(  p in 1: popsize ) {
 max_age = NA;
 for( i in 1:n ) {  
   x = rexp( 1, lambda);
   max_age = c( max_age, x );
 }
 age[p] = max( max_age, na.rm=T); 
}
median.age = median( age );
mean.age = mean( age );
h = hist(age, br=50, main=paste("n=",n) );
tb = data.frame( cbind( h$mids, h$density, h$counts ) );
names(tb) = c("mids","density","counts");
tb$cumulative.counts = 0; #initialization
for( i in 2:length(tb[,1]) ) {
  tb$cumulative.counts[i] = tb$cumulative.counts[i-1] + tb$counts[i];
}
tb$s = 1 - tb$cumulative.counts / max(tb$cumulative.counts);
tb$m = tb$density / tb$s ;
plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( c("n:",n,"bins=",length(tb$mids)),sep='',collapse = ',' ) );
plot( tb$m ~ tb$mids, main=paste( c("n:",n,"bins=",length(tb$mids)),collapase=',', sep='') );
plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( c('n:',n,'bins=',length(tb$mids)),sep='',collapse = ',' ) );
 plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( c('n:',n,'bins=',length(tb$mids)),sep='' ) );
 plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( c('n:',n,'bins=',length(tb$mids)),sep='',collapose='' ) );
 plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( c('n:',n,'bins=',length(tb$mids)),sep=' ') );
 plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( c('n:',n,'bins=',length(tb$mids)),sep=',') );
 plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( c('n:',n,'bins=',length(tb$mids)),collapse=' ') );
# simulation of mortality curves based on exonential dying compoennts
# exponential distribution f(x) = lambda e^(- lambda x)
rm(list=ls());
component.mortality.rate = function(lambda) { lambda; };
single.component.survivalbility = function(lambda, x) { exp( - lambda * x) }
single.component.mortality = function(lambda, x) {1 - lambda * exp(-lambda*x); }
lambda = 1; 
ns = c(1, 2,3,4,10); #number of parrallel nodes
colors = c("black","red","blue","green","yellow","brown");
for( n in ns ) {
simtime = 10;  #simulation time
simstep = 0.1 
popsize = 10^4; #population size
age = rep(NA, popsize);
for(  p in 1: popsize ) {
 max_age = NA;
 for( i in 1:n ) {  
   x = rexp( 1, lambda);
   max_age = c( max_age, x );
 }
 age[p] = max( max_age, na.rm=T); 
}
median.age = median( age );
mean.age = mean( age );
h = hist(age, br=50, main=paste("n=",n) );
tb = data.frame( cbind( h$mids, h$density, h$counts ) );
names(tb) = c("mids","density","counts");
tb$cumulative.counts = 0; #initialization
for( i in 2:length(tb[,1]) ) {
  tb$cumulative.counts[i] = tb$cumulative.counts[i-1] + tb$counts[i];
}
tb$s = 1 - tb$cumulative.counts / max(tb$cumulative.counts);
tb$m = tb$density / tb$s ;
if (n == 1) {
 #plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( c('n:',n,'bins=',length(tb$mids)),collapse=' ') );
 plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( 'simulation of mortality rate') );
} else {
 lines( tb$m ~ tb$mids, col=colors[n] );
}
}
n
n=1
# simulation of mortality curves based on exonential dying compoennts
# exponential distribution f(x) = lambda e^(- lambda x)
rm(list=ls());
component.mortality.rate = function(lambda) { lambda; };
single.component.survivalbility = function(lambda, x) { exp( - lambda * x) }
single.component.mortality = function(lambda, x) {1 - lambda * exp(-lambda*x); }
lambda = 1; 
ns = c(1, 2 ); #number of parrallel nodes
colors = c("black","red","blue","green","yellow","brown");
simtime = 10;  #simulation time
simstep = 0.1 
popsize = 10^4; #population size
age = rep(NA, popsize);
for( n in ns ) {
for(  p in 1: popsize ) {
 max_age = NA;
 for( i in 1:n ) {  
   x = rexp( 1, lambda);
   max_age = c( max_age, x );
 }
 age[p] = max( max_age, na.rm=T); 
}
median.age = median( age );
mean.age = mean( age );
h = hist(age, br=50, main=paste("n=",n) );
tb = data.frame( cbind( h$mids, h$density, h$counts ) );
names(tb) = c("mids","density","counts");
tb$cumulative.counts = 0; #initialization
for( i in 2:length(tb[,1]) ) {
  tb$cumulative.counts[i] = tb$cumulative.counts[i-1] + tb$counts[i];
}
tb$s = 1 - tb$cumulative.counts / max(tb$cumulative.counts);
tb$m = tb$density / tb$s ;
if (n == 1) {
 #plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( c('n:',n,'bins=',length(tb$mids)),collapse=' ') );
 plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( 'simulation of mortality rate') );
} else {
 lines( tb$m ~ tb$mids, col=colors[n] );
}
}
# simulation of mortality curves based on exonential dying compoennts
# exponential distribution f(x) = lambda e^(- lambda x)
rm(list=ls());
component.mortality.rate = function(lambda) { lambda; };
single.component.survivalbility = function(lambda, x) { exp( - lambda * x) }
single.component.mortality = function(lambda, x) {1 - lambda * exp(-lambda*x); }
lambda = 1; 
ns = c(1, 2 ); #number of parrallel nodes
colors = c("black","red","blue","green","yellow","brown");
simtime = 10;  #simulation time
simstep = 0.1 
popsize = 10^4; #population size
age = rep(NA, popsize);
for( n in ns ) {
for(  p in 1: popsize ) {
 max_age = NA;
 for( i in 1:n ) {  
   x = rexp( 1, lambda);
   max_age = c( max_age, x );
 }
 age[p] = max( max_age, na.rm=T); 
}
median.age = median( age );
mean.age = mean( age );
h = hist(age, br=50, main=paste("n=",n) );
tb = data.frame( cbind( h$mids, h$density, h$counts ) );
names(tb) = c("mids","density","counts");
tb$cumulative.counts = 0; #initialization
for( i in 2:length(tb[,1]) ) {
  tb$cumulative.counts[i] = tb$cumulative.counts[i-1] + tb$counts[i];
}
tb$s = 1 - tb$cumulative.counts / max(tb$cumulative.counts);
tb$m = tb$density / tb$s ;
if (n == 1) {
 #plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( c('n:',n,'bins=',length(tb$mids)),collapse=' ') );
 plot( tb$m ~ tb$mids, xlim = c(0, mean.age*4), main=paste( 'simulation of mortality rate') );
} else {
 lines( tb$m ~ tb$mids, col=colors[n] );
}
}
8958.26 * 0.062
8958.26 * 0.0145
8958.26 * (0.0145 + 0.062)
?t.test
t.test
?var
rnorm( 100)
x = rnorm( 100)
var(x)
std(x)
stddev(x)
?std_dev
sqrt(var(x))
p=rbeta(100,0.6,1)
library(qvalue)
install.pacakges(qvalue)
install.pacakages(qvalue)
install.pacakage("qvalue")
utils:::menuInstallPkgs()
library(qvalue)
p
qobj = qvalue(p)
qobj
x = seq(1:10)
y = seq(1:10)
plot( y ~ x )
tb = read.csv("CFU.csv");
tb
plot(tb$OD600 ~ tbM$CFU);
plot(tb$OD600 ~ tb$CFU);
tb = tb[1:12,] # pick the first 12 rows
tb
plot(tb$OD600 ~ tb$CFU);
plot(tb$CFU ~ tb$OD600);
tb = tb[1:12,] # pick the first 12 rows, WHY?
plot(tb$CFU ~ tb$OD600);
plot(tb$CFU ~ tb$OD600);
m = lm( tb$CFU ~ tb$OD600)
abline(m, col="red");
summary(m)
